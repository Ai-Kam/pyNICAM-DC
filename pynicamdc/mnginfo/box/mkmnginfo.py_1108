import numpy as np
import toml
from adm import Adm  # Assuming adm is a module containing the Adm class

class Mkmnginfo:
    def __init__(self):
        self.ad = Adm()
        
        # Load configurations from TOML file
        cnfs = toml.load('prep.toml')['mkmnginfo']
        self.rlevel = cnfs['rlevel']
        self.prc_num = cnfs['prc_num']
        self.output_fname = cnfs['output_fname']

        print('prc_num', self.prc_num)

        self.nmax_dmd = 10

        # Define and initialize the matrix using numpy for better performance
        matrix_init = np.array([
            [6, 5, 2, 10],
            [10, 1, 3, 9],
            [9, 2, 4, 8],
            [8, 3, 5, 7],
            [7, 4, 1, 6],
            [7, 5, 1, 10],
            [8, 4, 5, 6],
            [9, 3, 4, 7],
            [10, 2, 3, 8],
            [6, 1, 2, 9]
        ])

        # Adjusting for zero-based indexing used in numpy
        self.dmd_data = np.zeros((self.ad.I_SE - self.ad.I_SW + 1, self.nmax_dmd), dtype=int)
        for j in range(self.nmax_dmd):    # 0-9 if 10
            for i in range(self.ad.I_SW, self.ad.I_SE + 1):  # +1 because the range is exclusive,  range(1,5), so 1 to 4
                self.dmd_data[i - self.ad.I_SW, j] = matrix_init[j, i - self.ad.I_SW]
                print(i-self.ad.I_SW,j)
                
    def generate_mngtab(self, rl, nmax_prc, fname):
        rgnlen = 2 ** rl
        all_rgn = self.nmax_dmd * rgnlen * rgnlen

        # Use numpy to create the 3D array (much faster and more efficient)
        rgn_tab = np.zeros((self.ad.I_DIR - self.ad.I_RGNID + 1, self.ad.I_SE - self.ad.I_SW + 1, all_rgn), dtype=int)
        print(self.ad.I_DIR - self.ad.I_RGNID + 1, self.ad.I_SE - self.ad.I_SW + 1, all_rgn, '!!') 
        print(rgn_tab[0,0,0])
        print(rgn_tab[1,3,39])
        #print(rgn_tab[2,4,40])
        # You can use numpy's saving functions if you need to store the array
        # np.save(fname, rgn_tab)  # example of saving

        #return rgn_tab  # or any other appropriate action

        for d in range(self.nmax_dmd):
            for i in range(rgnlen):
                for j in range(rgnlen):
                    l = (rgnlen * rgnlen) * d + rgnlen * j + i + 1  # +1 because 'l' seems to be a 1-based index
                    print(self.ad.I_SW, self.ad.I_SE + 1,'Ho')
                    for k in range(self.ad.I_SW, self.ad.I_SE + 1):  # Loop over the range of directions
                        # The following conditional checks are placeholders for actual logic
                        print(k, d, '!!!!')
                        if k == self.ad.I_SW:
                            if j == 0:
                                if d < 5:
                                    i_nb = i
                                    j_nb = rgnlen - 1
                                    d_nb = self.dmd_data[k-1, d]
                                    edgid_nb = self.ad.I_NE
                                else:
                                    i_nb = rgnlen - 1
                                    j_nb = rgnlen - i - 1
                                    d_nb = self.dmd_data[k-1, d]
                                    edgid_nb = self.ad.I_SE
                            else:
                                i_nb = i
                                j_nb = j - 1
                                d_nb = d
                                edgid_nb = self.ad.I_NE
                        
                        elif k == self.ad.I_NW:
                            if i == 0:  # If we are at the 'west' edge of the region
                                if d < 5:
                                    i_nb = rgnlen - j - 1  # Reflect for the opposite edge
                                    j_nb = rgnlen - 1
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_NE  # Edge ID for the north-east
                                else:
                                    i_nb = rgnlen - 1
                                    j_nb = j
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_SE  # Edge ID for the south-east
                            else:
                                i_nb = i - 1
                                j_nb = j
                                d_nb = d  # Same domain
                                edgid_nb = self.ad.I_SE  # Edge ID for the south-east
                                
                        elif k == self.ad.I_NE:
                            if j == rgnlen - 1:  # If we are at the 'north' edge of the region
                                if d < 5:
                                    i_nb = 0  # Start at the beginning of the i-index
                                    j_nb = rgnlen - i - 1  # Reflect for the opposite edge
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_NW  # Edge ID for the north-west
                                else:
                                    i_nb = i
                                    j_nb = 0  # Start at the beginning of the j-index
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_SW  # Edge ID for the south-west
                            else:
                                i_nb = i
                                j_nb = j + 1
                                d_nb = d  # Same domain
                                edgid_nb = self.ad.I_SW  # Edge ID for the south-west
                        
                        elif k == self.ad.I_SE:
                            if i == rgnlen - 1:  # If we are at the 'east' edge of the region
                                if d < 5:
                                    i_nb = 0  # Start at the beginning of the i-index
                                    j_nb = j  # Stay in the same row
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_NW  # Edge ID for the north-west
                                else:
                                    i_nb = rgnlen - j - 1  # Reflect for the opposite edge
                                    j_nb = 0  # Start at the beginning of the j-index
                                    d_nb = self.dmd_data[k-1, d]  # Direction based on dmd_data
                                    edgid_nb = self.ad.I_SW  # Edge ID for the south-west
                            else:
                                i_nb = i + 1
                                j_nb = j
                                d_nb = d  # Same domain
                                edgid_nb = self.ad.I_NW  # Edge ID for the north-west


                            np.save(fname, rgn_tab)
                                
# ... (rest of the script, if there is more) ...
print('haha')
mk=Mkmnginfo()
mk.generate_mngtab(mk.rlevel,mk.prc_num,mk.output_fname)
