class Mkmnginfo:
    import toml 
    import adm 

    ad = adm.Adm()

    #rlevel = 1               # region division level
    #prc_num = 40             # process number
    #HGRID_SYSTEM = 'ICO'     # grid system( default ico)
    #MAPPING_TYPE = ''        # mapping method [add] C.Kodama 2011/12/14
    #output_fname = 'rl01-prc40.info'  # output region-management filename

    cnfs=toml.load('prep.toml')['mkmnginfo']
    rlevel = cnfs['rlevel']
    prc_num = cnfs['prc_num']
    output_fname = cnfs['output_fname']
    
    print('prc_num', prc_num)
    
    nmax_dmd = 10

    def __init__(self):
        print('I_SE', self.ad.I_SE)
        print('I_SW', self.ad.I_SW)
    # Define the matrix
        self.dmd_data = [[0 for _ in range(self.nmax_dmd)] for _ in range(self.ad.I_SE - self.ad.I_SW + 1)]

        # Initialize the matrix with the specific values
        matrix_init = [
            [6, 5, 2, 10],
            [10, 1, 3, 9],
            [9, 2, 4, 8],
            [8, 3, 5, 7],
            [7, 4, 1, 6],
            [7, 5, 1, 10],
            [8, 4, 5, 6],
            [9, 3, 4, 7],
            [10, 2, 3, 8],
            [6, 1, 2, 9]
        ]

        for j in range(self.nmax_dmd):
            for i in range(self.ad.I_SW-1, self.ad.I_SE):
                self.dmd_data[i][j] = matrix_init[j][i - (self.ad.I_SW-1)]
               
    def generate_mngtab(self,rl,nmax_prc,fname):
        
        rgnlen = 2**rl
        all_rgn = self.nmax_dmd*rgnlen*rgnlen        

        rgn_tab = [[[0 for _ in range(all_rgn)] 
                    for _ in range(self.ad.I_SE - self.ad.I_SW + 1)] 
                   for _ in range(self.ad.I_DIR - self.ad.I_RGNID + 1)]
        
        for d in range(self.nmax_dmd):  # Adjusting the loop for 0-based indexing
            for i in range(rgnlen):
                for j in range(rgnlen):
                    l = (rgnlen * rgnlen) * d + rgnlen * j + i + 1  # +1 because 'l' seems to be a 1-based index

                    for k in range(self.ad.I_SW, self.ad.I_SE + 1):  # k values are based on constants defined earlier
                        if k == self.ad.I_SW:
                            if j == 0:
                                if d < 5:
                                    i_nb = i
                                    j_nb = rgnlen - 1
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_NE
                                else:
                                    i_nb = rgnlen - 1
                                    j_nb = rgnlen - i - 1
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_SE
                            else:
                                i_nb = i
                                j_nb = j - 1
                                d_nb = d + 1  # d seems to be a 1-based index
                                edgid_nb = self.ad.I_NE

                        elif k == self.ad.I_NW:
                            if i == 0:
                                if d < 5:
                                    i_nb = rgnlen - j - 1
                                    j_nb = rgnlen - 1
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_NE
                                else:
                                    i_nb = rgnlen - 1
                                    j_nb = j
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_SE
                            else:
                                i_nb = i - 1
                                j_nb = j
                                d_nb = d + 1
                                edgid_nb = self.ad.I_SE

                        elif k == self.ad.I_NE:
                            if j == rgnlen - 1:
                                if d < 5:
                                    i_nb = 0
                                    j_nb = rgnlen - i - 1
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_NW
                                else:
                                    i_nb = i
                                    j_nb = 0
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_SW
                            else:
                                i_nb = i
                                j_nb = j + 1
                                d_nb = d + 1
                                edgid_nb = self.ad.I_SW

                        elif k == self.ad.I_SE:
                            if i == rgnlen - 1:
                                if d < 5:
                                    i_nb = 0
                                    j_nb = j
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_NW
                                else:
                                    i_nb = rgnlen - j - 1
                                    j_nb = 0
                                    d_nb = self.dmd_data[k - 1][d]
                                    edgid_nb = self.ad.I_SW
                            else:
                                i_nb = i + 1
                                j_nb = j
                                d_nb = d + 1
                                edgid_nb = self.ad.I_NW

                        l_nb = (rgnlen * rgnlen) * (d_nb - 1) + rgnlen * (j_nb) + i_nb + 1  # Adjusted index
                        rgn_tab[self.ad.I_RGNID - 1][k - 1][l - 1] = l_nb  # Adjusted for 0-based indexing
                        rgn_tab[self.ad.I_DIR - 1][k - 1][l - 1] = edgid_nb  # Adjusted for 0-based indexing

                        tw=open(fname,'w')
                        #                        tw.write('ho')
                        for row in rgn_tab:
                            print(*row, sep=',',file=tw)
#                        tw.flush()
        # ... rest of the method if there's more ...

        
        # This method appears to be a placeholder for now.
        # Add the necessary setup code here.
        pass


#    for i in range(1, 4):
#        print(i)
    



print('haha')
mk=Mkmnginfo()
mk.generate_mngtab(mk.rlevel,mk.prc_num,mk.output_fname)
#print(mk.generate_mngtab.rgn_tab)
#print(data)
